custom:
  jwt:
    secret: ${env:JWT_SECRET}
    expiration_time: 320d
  database:
    dev:
      name: ${env:DB_NAME_STAGING}
      host: ${env:DB_HOST_STAGING}
      username: ${env:DB_USERNAME_STAGING}
      userpassword: ${env:DB_USERPASSWORD_STAGING}
    staging:
      name: ${env:DB_NAME_STAGING}
      host: ${env:DB_HOST_STAGING}
      username: ${env:DB_USERNAME_STAGING}
      userpassword: ${env:DB_USERPASSWORD_STAGING}
    production:
      name: ${env:DB_NAME}
      host: ${env:DB_HOST}
      username: ${env:DB_USERNAME}
      userpassword: ${env:DB_USERPASSWORD}
    name: ${self:custom.database.${opt:stage, 'dev'}.name}
    host: ${self:custom.database.${opt:stage, 'dev'}.host}
    username: ${self:custom.database.${opt:stage, 'dev'}.username}
    userpassword: ${self:custom.database.${opt:stage, 'dev'}.userpassword}
  github:
    user_token: ${env:GITHUB_USER_TOKEN}
    dev:
      github_client_id: ${env:DEV_GITHUB_CLIENT_ID}
      github_client_secret: ${env:DEV_GITHUB_CLIENT_SECRET}
    staging:
      github_client_id: ${env:STAGING_GITHUB_CLIENT_ID}
      github_client_secret: ${env:STAGING_GITHUB_CLIENT_SECRET}
    production:
      github_client_id: ${env:GITHUB_CLIENT_ID}
      github_client_secret: ${env:GITHUB_CLIENT_SECRET}
    client_id: ${self:custom.github.${opt:stage, 'dev'}.github_client_id} # github auth app client_id
    client_secret: ${self:custom.github.${opt:stage, 'dev'}.github_client_secret} # github auth app client_secret
  functions:
    # Add lambda functions for public endpoints here so Jest will not complain
    public:
      - authorization
      - getProjectCards
      - getProjectDetails
      - getUserInfo
  domainNames:
    dev:
      name: dev.api.opensource.engcom.magento.com
      path: ${opt:branch, ''}
      stage: ${opt:stage, ''}
    staging:
      name: api.opensource.engcom.magento.com
      path: ${opt:branch, ''}
      stage: ${opt:stage, ''}
    production:
      name: api.opensource.magento.com
      path: ${opt:branch, ''}
      stage: ${opt:stage, ''}
  customDomain:
   domainName: ${self:custom.domainNames.${opt:stage, 'dev'}.name}
   basePath: ${self:custom.domainNames.${opt:stage, 'dev'}.path} # If created by CircleCI prefix will correspond to the branch code is pushed to
   stage: ${self:provider.stage} # Stage will be created for every branch
   createRoute53Record: false
  vpc:
    staging:
      subnetOne: ${env:VPC_SUBNET_ONE_STAGING}
      subnetTwo: ${env:VPC_SUBNETS_TWO_STAGING}
      securityGroup: ${env:VPC_SECURITY_GROUP_STAGING}
    production:
      subnetOne: ${env:VPC_SUBNET_ONE_PRODUCTION}
      subnetTwo: ${env:VPC_SUBNET_TWO_PRODUCTION}
      securityGroup: ${env:VPC_SECURITY_GROUP_PRODUCTION}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.domainNames.${opt:stage, 'dev'}.stage, 'dev'}
  region: us-east-1
  vpc:
    securityGroupIds:
     - ${self:custom.vpc.${opt:stage, 'dev'}.securityGroup}
    subnetIds:
     - ${self:custom.vpc.${opt:stage, 'dev'}.subnetOne}
     - ${self:custom.vpc.${opt:stage, 'dev'}.subnetTwo}
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    JWT_SECRET: ${self:custom.jwt.secret}
    JWT_EXPIRATION_TIME: ${self:custom.jwt.expiration_time}
    BASE_PATH: ${self:custom.domainNames.${opt:stage, 'dev'}.path}
    GITHUB_CLIENT_ID: ${self:custom.github.client_id}
    GITHUB_CLIENT_SECRET: ${self:custom.github.client_secret}
    GITHUB_USER_TOKEN: ${self:custom.github.user_token}
    DB_NAME: ${self:custom.database.name}
    DB_USERNAME: ${self:custom.database.username}
    DB_USERPASSWORD: ${self:custom.database.userpassword}
    DB_HOST: ${self:custom.database.host}
  iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:*
        Resource:
          - 'Fn::Join':
            - ':'
            -
              - 'arn:aws:logs'
              - '*'
              - '*'
              - '*'
      - Effect: Allow
        Action:
          - cloudwatch:*
          - logs:*
        Resource:
          - '*'
package:
  individually: false
  exclude:
    - coverage/**
    - .circleci/**

service: community-portal

functions:
  - ${file(./handlers/user/getUserStatistic/getUserStatistic.yml)}
  - ${file(./handlers/authorizer/authorizer.yml)}
  - ${file(./handlers/authorization/authorization.yml)}
  - ${file(./handlers/project/createProject/createProject.yml)}
  - ${file(./handlers/project/getProjectCards/getProjectCards.yml)}
  - ${file(./handlers/project/getProjectDetails/getProjectDetails.yml)}
  - ${file(./handlers/project/editProject/editProject.yml)}
  - ${file(./handlers/project/joinProject/joinProject.yml)}
  - ${file(./handlers/project/unjoinProject/unjoinProject.yml)}
  - ${file(./handlers/project/starProject/starProject.yml)}
  - ${file(./handlers/project/unstarProject/unstarProject.yml)}
  - ${file(./handlers/user/bookmarkProject/bookmarkProject.yml)}
  - ${file(./handlers/user/unbookmarkProject/unbookmarkProject.yml)}
  - ${file(./handlers/user/getLikedProjects/getLikedProjects.yml)}
  - ${file(./handlers/user/getUserInfo/getUserInfo.yml)}
  - ${file(./handlers/survey/loadSurvey/loadSurvey.yml)}
  - ${file(./handlers/survey/saveResults/saveResults.yml)}

resources:
  Resources:
    # Allow CORS headers for custom authorizer
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
        ResponseTemplates:
          application/json: "{\"error\": $context.error.messageString}"
    # Add references to defined tables and roles here before deployment
    getUserStatisticRole: ${file(./handlers/user/getUserStatistic/role.yml):getUserStatisticRole}
    joinProjectRole: ${file(./handlers/project/joinProject/role.yml):joinProjectRole}
    unjoinProjectRole: ${file(./handlers/project/unjoinProject/role.yml):unjoinProjectRole}
    projectStarsRole: ${file(./handlers/indexer/projectStars/role.yml):projectStarsRole}
    createProjectRole: ${file(./handlers/project/createProject/role.yml):createProjectRole}
    getProjectRole: ${file(./handlers/project/getProjectCards/role.yml):getProjectRole}
    getProjectDetailsRole: ${file(./handlers/project/getProjectDetails/role.yml):getProjectDetailsRole}
    editProjectRole: ${file(./handlers/project/editProject/role.yml):editProjectRole}
    starProjectRole: ${file(./handlers/project/starProject/role.yml):starProjectRole}
    unstarProjectRole: ${file(./handlers/project/unstarProject/role.yml):unstarProjectRole}
    bookmarkProjectRole: ${file(./handlers/user/bookmarkProject/role.yml):bookmarkProjectRole}
    unbookmarkProjectRole: ${file(./handlers/user/unbookmarkProject/role.yml):unbookmarkProjectRole}
    getLikedProjectsRole: ${file(./handlers/user/getLikedProjects/role.yml):getLikedProjectsRole}
    getUserInfoRole: ${file(./handlers/user/getUserInfo/role.yml):getUserInfoRole}
    authorizationRole: ${file(./handlers/authorization/role.yml):authorizationRole}
    loadSurveyRole: ${file(./handlers/survey/loadSurvey/role.yml):loadSurveyRole}
    saveResultsRole: ${file(./handlers/survey/saveResults/role.yml):saveResultsRole}

plugins:
  - serverless-domain-manager
  - serverless-webpack
  - serverless-offline # serverless-offline needs to be last in the list
